// Generated by gencpp from file kmriiwa_msgs/JointPosition.msg
// DO NOT EDIT!


#ifndef KMRIIWA_MSGS_MESSAGE_JOINTPOSITION_H
#define KMRIIWA_MSGS_MESSAGE_JOINTPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kmriiwa_msgs
{
template <class ContainerAllocator>
struct JointPosition_
{
  typedef JointPosition_<ContainerAllocator> Type;

  JointPosition_()
    : header()
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , a4(0.0)
    , a5(0.0)
    , a6(0.0)
    , a7(0.0)  {
    }
  JointPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , a4(0.0)
    , a5(0.0)
    , a6(0.0)
    , a7(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _a1_type;
  _a1_type a1;

   typedef float _a2_type;
  _a2_type a2;

   typedef float _a3_type;
  _a3_type a3;

   typedef float _a4_type;
  _a4_type a4;

   typedef float _a5_type;
  _a5_type a5;

   typedef float _a6_type;
  _a6_type a6;

   typedef float _a7_type;
  _a7_type a7;





  typedef boost::shared_ptr< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> const> ConstPtr;

}; // struct JointPosition_

typedef ::kmriiwa_msgs::JointPosition_<std::allocator<void> > JointPosition;

typedef boost::shared_ptr< ::kmriiwa_msgs::JointPosition > JointPositionPtr;
typedef boost::shared_ptr< ::kmriiwa_msgs::JointPosition const> JointPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kmriiwa_msgs::JointPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kmriiwa_msgs::JointPosition_<ContainerAllocator1> & lhs, const ::kmriiwa_msgs::JointPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3 &&
    lhs.a4 == rhs.a4 &&
    lhs.a5 == rhs.a5 &&
    lhs.a6 == rhs.a6 &&
    lhs.a7 == rhs.a7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kmriiwa_msgs::JointPosition_<ContainerAllocator1> & lhs, const ::kmriiwa_msgs::JointPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kmriiwa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d0a4f29c23a5c6c3eab418768bb26e4";
  }

  static const char* value(const ::kmriiwa_msgs::JointPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d0a4f29c23a5c6cULL;
  static const uint64_t static_value2 = 0x3eab418768bb26e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kmriiwa_msgs/JointPosition";
  }

  static const char* value(const ::kmriiwa_msgs::JointPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 a1\n"
"float32 a2\n"
"float32 a3\n"
"float32 a4\n"
"float32 a5\n"
"float32 a6\n"
"float32 a7\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kmriiwa_msgs::JointPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.a4);
      stream.next(m.a5);
      stream.next(m.a6);
      stream.next(m.a7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kmriiwa_msgs::JointPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kmriiwa_msgs::JointPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "a1: ";
    Printer<float>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<float>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<float>::stream(s, indent + "  ", v.a3);
    s << indent << "a4: ";
    Printer<float>::stream(s, indent + "  ", v.a4);
    s << indent << "a5: ";
    Printer<float>::stream(s, indent + "  ", v.a5);
    s << indent << "a6: ";
    Printer<float>::stream(s, indent + "  ", v.a6);
    s << indent << "a7: ";
    Printer<float>::stream(s, indent + "  ", v.a7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KMRIIWA_MSGS_MESSAGE_JOINTPOSITION_H
